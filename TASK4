module fir_filter #(
    parameter N = 4, // Number of taps
    parameter WIDTH = 16 // Bit width
)(
    input wire clk,
    input wire rst,
    input wire signed [WIDTH-1:0] x_in,
    output reg signed [WIDTH+2:0] y_out // Output bit width may grow
);
    // Example coefficients (h0=1, h1=2, h2=3, h3=4)
    reg signed [WIDTH-1:0] h [0:N-1];
    initial begin
        h[0] = 16'sd1;
        h[1] = 16'sd2;
        h[2] = 16'sd3;
        h[3] = 16'sd4;
    end

    reg signed [WIDTH-1:0] x_reg [0:N-1];
    integer i;

    always @(posedge clk or posedge rst) begin
        if (rst) begin
            for (i = 0; i < N; i = i + 1)
                x_reg[i] <= 0;
            y_out <= 0;
        end else begin
            // Shift register
            for (i = N-1; i > 0; i = i - 1)
                x_reg[i] <= x_reg[i-1];
            x_reg[0] <= x_in;

            // FIR calculation
            y_out <= h[0]*x_reg[0] + h[1]*x_reg[1] + h[2]*x_reg[2] + h[3]*x_reg[3];
        end
    end
endmodule
